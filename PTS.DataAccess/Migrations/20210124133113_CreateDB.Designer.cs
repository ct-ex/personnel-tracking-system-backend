// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PTS.DataAccess;

namespace PTS.DataAccess.Migrations
{
    [DbContext(typeof(PTSContext))]
    [Migration("20210124133113_CreateDB")]
    partial class CreateDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PTS.Entities.Assigment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssigmentTagId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("Convert(Date,GetDate())");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("space(0)");

                    b.Property<DateTime>("DueDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("Convert(Date,GetDate())");

                    b.Property<string>("HtmlContent")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("space(0)");

                    b.Property<int>("PersonnelId")
                        .HasColumnType("int");

                    b.Property<short>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValueSql("space(0)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AssigmentTagId");

                    b.HasIndex("PersonnelId");

                    b.ToTable("Assigments");
                });

            modelBuilder.Entity("PTS.Entities.AssigmentTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValueSql("space(0)")
                        .HasMaxLength(100);

                    b.Property<string>("TagBackgroundColor")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(7)")
                        .HasDefaultValueSql("space(0)")
                        .HasMaxLength(7);

                    b.Property<string>("TagColor")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(7)")
                        .HasDefaultValueSql("space(0)")
                        .HasMaxLength(7);

                    b.HasKey("Id");

                    b.ToTable("AssigmentTags");
                });

            modelBuilder.Entity("PTS.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValueSql("space(0)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("PTS.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("Convert(Date,GetDate())");

                    b.Property<bool>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("space(0)");

                    b.Property<int>("PersonnelId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValueSql("space(0)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PTS.Entities.Personnel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(75)")
                        .HasDefaultValueSql("space(0)")
                        .HasMaxLength(75);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(25)")
                        .HasDefaultValueSql("space(0)")
                        .HasMaxLength(25);

                    b.Property<string>("Gsm")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(11)")
                        .HasDefaultValueSql("space(0)")
                        .HasMaxLength(11);

                    b.Property<bool>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(25)")
                        .HasDefaultValueSql("space(0)")
                        .HasMaxLength(25);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("PersonnelType")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePhoto")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValueSql("space(0)")
                        .HasMaxLength(255);

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValueSql("space(0)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("RefreshTokenExpiredDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("Convert(Date,GetDate())");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RefreshToken")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("TitleId");

                    b.ToTable("Personnels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "lutfikotann@gmail.com",
                            FirstName = "Lütfi",
                            Gsm = "",
                            IsBlocked = false,
                            LastName = "Kotan",
                            PasswordHash = new byte[] { 57, 195, 173, 176, 24, 8, 59, 69, 18, 103, 242, 228, 230, 22, 180, 7, 125, 12, 157, 92, 138, 137, 227, 241, 43, 168, 167, 23, 163, 49, 217, 93, 4, 106, 172, 229, 86, 119, 169, 36, 104, 207, 156, 76, 181, 172, 79, 184, 86, 152, 190, 237, 1, 25, 67, 19, 17, 170, 73, 224, 58, 62, 229, 176 },
                            PasswordSalt = new byte[] { 72, 148, 185, 144, 95, 207, 116, 162, 95, 110, 232, 40, 41, 139, 7, 224, 147, 184, 53, 137, 23, 111, 4, 128, 76, 48, 99, 217, 85, 187, 25, 210, 92, 110, 225, 167, 35, 210, 254, 214, 123, 85, 238, 220, 240, 58, 173, 13, 171, 249, 55, 130, 99, 39, 155, 56, 37, 35, 118, 5, 48, 19, 78, 4, 152, 116, 25, 120, 43, 104, 33, 72, 179, 144, 150, 41, 177, 163, 106, 31, 254, 249, 45, 164, 128, 249, 159, 67, 158, 39, 40, 147, 114, 170, 122, 83, 144, 63, 46, 137, 7, 250, 95, 152, 39, 209, 145, 170, 238, 22, 153, 105, 45, 108, 122, 235, 207, 2, 163, 220, 213, 112, 51, 200, 150, 241, 122, 182 },
                            PersonnelType = 20,
                            ProfilePhoto = "",
                            RefreshToken = "Y9ADLGNJ8ZO4T9GHFKUP6UVOB6W0FLSKFHUHU2XM",
                            RefreshTokenExpiredDate = new DateTime(2021, 1, 23, 16, 31, 12, 516, DateTimeKind.Local).AddTicks(8310)
                        });
                });

            modelBuilder.Entity("PTS.Entities.PersonnelNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("PersonnelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("PersonnelId", "NotificationId")
                        .IsUnique();

                    b.ToTable("AccountNotifications");
                });

            modelBuilder.Entity("PTS.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValueSql("space(0)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("PTS.Entities.Rule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationModule")
                        .HasColumnType("int");

                    b.Property<bool>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("Insert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("Update")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("View")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("RoleId", "ApplicationModule")
                        .IsUnique();

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("PTS.Entities.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValueSql("space(0)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("PTS.Entities.Assigment", b =>
                {
                    b.HasOne("PTS.Entities.AssigmentTag", "AssigmentTag")
                        .WithMany()
                        .HasForeignKey("AssigmentTagId");

                    b.HasOne("PTS.Entities.Personnel", "Personnel")
                        .WithMany()
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PTS.Entities.Personnel", b =>
                {
                    b.HasOne("PTS.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("PTS.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("PTS.Entities.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId");
                });

            modelBuilder.Entity("PTS.Entities.PersonnelNotification", b =>
                {
                    b.HasOne("PTS.Entities.Notification", "Notification")
                        .WithMany("PersonnelNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PTS.Entities.Personnel", "Personnel")
                        .WithMany("PersonnelNotifications")
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PTS.Entities.Rule", b =>
                {
                    b.HasOne("PTS.Entities.Role", "Role")
                        .WithMany("Rules")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
